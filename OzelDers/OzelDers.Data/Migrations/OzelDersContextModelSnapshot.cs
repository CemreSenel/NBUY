// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OzelDers.Data.Concrete.EfCore.Context;

#nullable disable

namespace OzelDers.Data.Migrations
{
    [DbContext(typeof(OzelDersContext))]
    partial class OzelDersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("OzelDers.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Matematik",
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kimya",
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fizik",
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Biyoloji",
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tarih",
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Edebiyat",
                            Url = "edebiyat"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Almanca",
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 8,
                            Name = "İngilizce",
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Coğrafya",
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Bilgisayar",
                            Url = "bilgisayar"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = "15",
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageUrl = "1.png",
                            LastName = "Kazancı",
                            Url = "ali-kazanci"
                        },
                        new
                        {
                            Id = 2,
                            Age = "17",
                            FirstName = "Kübra",
                            Gender = "Kadın",
                            ImageUrl = "2.png",
                            LastName = "Doğan",
                            Url = "kübra-dogan"
                        },
                        new
                        {
                            Id = 3,
                            Age = "16",
                            FirstName = "İsmet",
                            Gender = "Erkek",
                            ImageUrl = "3.png",
                            LastName = "Demirci",
                            Url = "ismet-demirci"
                        },
                        new
                        {
                            Id = 4,
                            Age = "18",
                            FirstName = "Melike",
                            Gender = "Kadın",
                            ImageUrl = "4.png",
                            LastName = "Kızar",
                            Url = "melike-demirci"
                        },
                        new
                        {
                            Id = 5,
                            Age = "19",
                            FirstName = "Osman",
                            Gender = "Erkek",
                            ImageUrl = "5.png",
                            LastName = "Kurtar",
                            Url = "osman-kurtar"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.StudentTeacher", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentTeachers", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            StudentId = 1,
                            TeacherId = 2
                        },
                        new
                        {
                            StudentId = 1,
                            TeacherId = 3
                        },
                        new
                        {
                            StudentId = 2,
                            TeacherId = 2
                        },
                        new
                        {
                            StudentId = 2,
                            TeacherId = 4
                        },
                        new
                        {
                            StudentId = 2,
                            TeacherId = 6
                        },
                        new
                        {
                            StudentId = 3,
                            TeacherId = 5
                        },
                        new
                        {
                            StudentId = 3,
                            TeacherId = 7
                        },
                        new
                        {
                            StudentId = 3,
                            TeacherId = 8
                        },
                        new
                        {
                            StudentId = 4,
                            TeacherId = 5
                        },
                        new
                        {
                            StudentId = 4,
                            TeacherId = 9
                        },
                        new
                        {
                            StudentId = 4,
                            TeacherId = 10
                        },
                        new
                        {
                            StudentId = 5,
                            TeacherId = 4
                        },
                        new
                        {
                            StudentId = 5,
                            TeacherId = 7
                        },
                        new
                        {
                            StudentId = 5,
                            TeacherId = 9
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PricePerHour")
                        .HasColumnType("TEXT");

                    b.Property<int>("UniversityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Teachers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Matematik Öğretmeni",
                            Age = "24",
                            BranchId = 1,
                            Experience = "5",
                            FirstName = "Mert",
                            Gender = "Erkek",
                            ImageUrl = "1.png",
                            LastName = "Muslu",
                            Location = "Yalova",
                            PricePerHour = 400m,
                            UniversityId = 1,
                            Url = "mert-muslu"
                        },
                        new
                        {
                            Id = 2,
                            About = "Fizik Öğretmeni",
                            Age = "25",
                            BranchId = 3,
                            Experience = "4",
                            FirstName = "Harun",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Öztürk",
                            Location = "İstabul",
                            PricePerHour = 200m,
                            UniversityId = 2,
                            Url = "harun-ozturk"
                        },
                        new
                        {
                            Id = 3,
                            About = "Kimya Öğretmeni",
                            Age = "26",
                            BranchId = 2,
                            Experience = "4",
                            FirstName = "Selin",
                            Gender = "Kadın",
                            ImageUrl = "3.png",
                            LastName = "Biçici",
                            Location = "İstanbul",
                            PricePerHour = 200m,
                            UniversityId = 3,
                            Url = "selin-bicici"
                        },
                        new
                        {
                            Id = 4,
                            About = "Biyoloji Öğretmeni",
                            Age = "27",
                            BranchId = 4,
                            Experience = "3",
                            FirstName = "Gizem",
                            Gender = "Kadın",
                            ImageUrl = "4.png",
                            LastName = "Deniz",
                            Location = "Ankara",
                            PricePerHour = 250m,
                            UniversityId = 4,
                            Url = "gizem-deniz"
                        },
                        new
                        {
                            Id = 5,
                            About = "Matematik Öğretmeni",
                            Age = "28",
                            BranchId = 1,
                            Experience = "2",
                            FirstName = "Deniz",
                            Gender = "Erkek",
                            ImageUrl = "5.png",
                            LastName = "Demir",
                            Location = "İstanbul",
                            PricePerHour = 175m,
                            UniversityId = 5,
                            Url = "deniz-demir"
                        },
                        new
                        {
                            Id = 6,
                            About = "Tarih Öğretmeni",
                            Age = "29",
                            BranchId = 5,
                            Experience = "7",
                            FirstName = "Yusuf",
                            Gender = "Erkek",
                            ImageUrl = "6.png",
                            LastName = "Demirci",
                            Location = "İstanbul",
                            PricePerHour = 300m,
                            UniversityId = 6,
                            Url = "yusuf-demirci"
                        },
                        new
                        {
                            Id = 7,
                            About = "Almanca Öğretmeni",
                            Age = "28",
                            BranchId = 7,
                            Experience = "3",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "7.png",
                            LastName = "Çetin",
                            Location = "İstanbul",
                            PricePerHour = 300m,
                            UniversityId = 7,
                            Url = "ahmet-cetin"
                        },
                        new
                        {
                            Id = 8,
                            About = "Almanca Öğretmeni",
                            Age = "27",
                            BranchId = 7,
                            Experience = "2",
                            FirstName = "Okan",
                            Gender = "Erkek",
                            ImageUrl = "8.png",
                            LastName = "Alan",
                            Location = "Kocaeli",
                            PricePerHour = 200m,
                            UniversityId = 8,
                            Url = "okan-alan"
                        },
                        new
                        {
                            Id = 9,
                            About = "Coğrafya Öğretmeni",
                            Age = "26",
                            BranchId = 9,
                            Experience = "5",
                            FirstName = "Hakan",
                            Gender = "Erkek",
                            ImageUrl = "9.png",
                            LastName = "Kara",
                            Location = "Kocaeli",
                            PricePerHour = 250m,
                            UniversityId = 9,
                            Url = "hakan-kara"
                        },
                        new
                        {
                            Id = 10,
                            About = "Edebiyat Öğretmeni",
                            Age = "25",
                            BranchId = 6,
                            Experience = "4",
                            FirstName = "Hande",
                            Gender = "Kadın",
                            ImageUrl = "10.png",
                            LastName = "Karakaya",
                            Location = "Kocaeli",
                            PricePerHour = 350m,
                            UniversityId = 10,
                            Url = "hande-karakaya"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Universities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Boğaziçi Üniversitesi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "İstanbul Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Yıldız Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Anadolu Üniversitesi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Marmara Üniversitesi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "İstanbul Üniversitesi"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Kocaeli Üniversitesi"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Sakarya Üniversitesi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Bahçeşehir Üniversitesi"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Bilkent Üniversitesi"
                        });
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.StudentTeacher", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Student", "Student")
                        .WithMany("StudentTeachers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("StudentTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("OzelDers.Entity.Concrete.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDers.Entity.Concrete.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("University");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Student", b =>
                {
                    b.Navigation("StudentTeachers");
                });

            modelBuilder.Entity("OzelDers.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("StudentTeachers");
                });
#pragma warning restore 612, 618
        }
    }
}
